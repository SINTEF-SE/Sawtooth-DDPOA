import json, os
import numpy as np


import json, os


def get_json(fn):
    with open(fn) as f:
        data = json.load(f)

    return data


def calculate_tps_from_dir(dir):
    
    node_metrics = {}
    for fn in os.listdir(dir):
        if fn.endswith("block_num.json"):
            data = get_json(f'{dir}/{fn}')
            ts,nodes,values = map_data_to_nodes(data)

            
            for node_name, value in zip(nodes,values):
                node = int(node_name.split('-')[1])

                if node not in node_metrics:
                    node_metrics[node] = []

                node_metrics[node].append(value)

    return node_metrics 

import csv
def write_to_csv(data,engine,test_fn="latency_test"):
    engines = [*data]

    with open(f"results/{test_fn}.csv", "a") as f:
        writer = csv.writer(f)
        if os.stat(f"results/{test_fn}.csv").st_size == 0:
            writer.writerow(['engine','node', 'rate', 'averaged_max_blocknr'])
            
        for key in engines:
            nodes = [*data[key]]
            for node in nodes:
                rate = [*data[key][node]]
                block_num = data[key][node].values()



                l = zip(*[[key]*len(rate),[node]*len(rate),rate,block_num])
                writer.writerows(l)


    
def average_run_values(data):
    rate_dictionary_nondelay = {"pbft" : {}, "ddpoa": {}, "poet": {}}
    rate_dictionary_delay = {"pbft" : {}, "ddpoa": {}, "poet": {}}

    for item in data:
        delay, nodes, _, _, engine, rate,run = item.split('_')
        rate = int(rate)
        node = int(nodes.split("=")[1])
        delay = int(delay)
        match delay:
            case 0:
                rate_dictionary = rate_dictionary_nondelay
            case 1:
                rate_dictionary = rate_dictionary_delay
        if node not in rate_dictionary[engine]:
            rate_dictionary[engine][node] = {}
        
        if rate not in rate_dictionary[engine][node]:
            rate_dictionary[engine][node][rate] = {}
        rate_dictionary[engine][node][rate][int(run)] = data[item]
    
    acc_delay, acc_nondelay = collate_runs(rate_dictionary_delay), collate_runs(rate_dictionary_nondelay)

    return average_runs(acc_delay), average_runs(acc_nondelay)

def collate_runs(dict):
    accumulated_runs ={"pbft" : {}, "ddpoa": {}, "poet": {}}

    for engine in dict:
        for node in dict[engine]:
            accumulated_runs[engine][node] = {}
            for rate_key in dict[engine][node]:
                accumulated_runs[engine][node][rate_key] = []
                for run in dict[engine][node][rate_key]:
                    if dict[engine][node][rate_key][run] == {}:
                        accumulated_runs[engine][node][rate_key].append(0.0) 
                        continue
                    accumulated_runs[engine][node][rate_key].append(sum(dict[engine][node][rate_key][run].values()) / len(dict[engine][node][rate_key][run].values()))        

    return accumulated_runs
    
def average_runs(dict):
    for engine in dict:
        for node in dict[engine]:
            for rate_key in dict[engine][node]:
                print(engine,rate_key)
                dict[engine][node][rate_key] = sum(dict[engine][node][rate_key]) / len(dict[engine][node][rate_key])
    
    return dict

def map_data_to_nodes(data):
    return zip(*data['series'][0]['values'])

def find_avg_block(data):
    for item in data:
        _, _,_,_ , engine, rate, run = item.split('_')
        
        node_metrics = data[item]

        for node in node_metrics:
            # print(node_metrics[node])
            if node_metrics[node] == []:
                node_metrics[node] = 0

            else:
                node_metrics[node] = np.max(node_metrics[node])
        
        data[item] = node_metrics

    return data 




if __name__ == "__main__":

    tps = {}
    for fn in os.listdir('runs'):
        tps[fn] = calculate_tps_from_dir(f'runs/{fn}')

    for item in tps:
        node = tps[item]
        print(node)
        if node == {}:
            continue
        tps[item][0] = list(filter(lambda x: x != 0, node[0])) # block number 0 is generated by the genesis block , skip

    data = find_avg_block(tps)

    avg_delay,avg_nondelay= average_run_values(data)

    write_to_csv(avg_delay,'ddpoa',test_fn="latency_test_delay")
    write_to_csv(avg_nondelay,'ddpoa',test_fn="latency_test_nodelay")